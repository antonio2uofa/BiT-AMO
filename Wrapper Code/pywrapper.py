import ctypes
import numpy as np

# Load library from DLL; make sure pywrapper.py is in the same folder
def load_bit():
	path_name = './ballsInTubesForML_2017.DLL'
	c_lib = ctypes.CDLL(path_name)
	return(c_lib)

# Returns integer that signals if there was a USB DAQ Error
# 0 - No Error
# 2 - USB DAQ Command Error
def initialize_bit(c_lib):
	error = c_lib.BallsUsbIniDll()
	return(error)

# Create a handle for the C library
# then unload the DLL file
def unload_bit(c_lib):
	handle = c_lib._handle
	ctypes.windll.kernel32.FreeLibrary(handle)

# Returns integer generated by opening USB
def open_usb(c_lib):
	opened = c_lib.Balls_usb_open()
	return(opened)

# Returns integer generated by closing USB
def close_usb(c_lib):
	closed = c_lib.Balls_usb_close()
	return(closed)

def delay_millis(c_lib, int_delay):
	c_lib.BallsDelayForMLDll(ctypes.c_uint(int_delay))
	return

def set_fan_speed(c_lib, flt_speed, tube_number):
	c_lib.BallsOutputFanSpeedDll(ctypes.c_float(flt_speed), ctypes.c_short(tube_number))
	return

def get_level_1(c_lib):
	e_code = ctypes.c_int32(0)
	shottime = ctypes.c_int32(0)
	timeout = ctypes.c_int16(0)

	e_code = ctypes.byref(e_code)
	shottime = ctypes.byref(shottime)
	timeout = ctypes.byref(timeout)

	level = c_lib.BallsReadLevel_1Dll(e_code, shottime,timeout)

	return level

def get_level_2(c_lib):
	e_code = ctypes.c_int32(0)
	shottime = ctypes.c_int32(0)
	timeout = ctypes.c_int16(0)

	e_code = ctypes.byref(e_code)
	shottime = ctypes.byref(shottime)
	timeout = ctypes.byref(timeout)

	level = c_lib.BallsReadLevel_2Dll(e_code, shottime,timeout)

	return level

def get_level_3(c_lib):
	e_code = ctypes.c_int32(0)
	shottime = ctypes.c_int32(0)
	timeout = ctypes.c_int16(0)

	e_code = ctypes.byref(e_code)
	shottime = ctypes.byref(shottime)
	timeout = ctypes.byref(timeout)

	level = c_lib.BallsReadLevel_3Dll(e_code, shottime,timeout)
	return level

def get_level_4(c_lib):
	e_code = ctypes.c_int32(0)
	shottime = ctypes.c_int32(0)
	timeout = ctypes.c_int16(0)

	e_code = ctypes.byref(e_code)
	shottime = ctypes.byref(shottime)
	timeout = ctypes.byref(timeout)

	level = c_lib.BallsReadLevel_4Dll(e_code, shottime,timeout)

	return level
